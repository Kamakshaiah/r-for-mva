len <- rows * cols
out <- round(matrix(rnorm(len), rows, cols), digits)
return(out)
}
multiNumData <- function(rows, cols, digits=0){
len <- rows * cols
out <- round(matrix(rnorm(len), rows, cols), digits)
return(as.data.frame(out))
}
sales <- multiNumData(5, 3, 2)
sales
multiNumData <- function(rows, cols, digits=0){
len <- rows * cols
out <- round(matrix(runif(len), rows, cols), digits)
return(as.data.frame(out))
}
sales <- multiNumData(5, 3, 2)
sales
multiNumData <- function(rows, cols){
len <- rows * cols
out <- matrix(runif(len), rows, cols)
return(as.data.frame(out))
}
sales <- multiNumData(5, 3, 2)
sales <- multiNumData(5, 3)
sales
sales <- round(multiNumData(5, 3)*100, 2)
sales
colnames(sales) <- makeMethodsList(3)
multiNumData <- function(rows, cols){
len <- rows * cols
out <- matrix(runif(len), rows, cols)
return(out)
}
multiNumData <- function(rows, cols){
len <- rows * cols
out <- matrix(runif(len), rows, cols)
return(out)
}
sales <- round(multiNumData(5, 3), 2)*10
colnames(sales) <- makeMonths(3)
sales
makeMonths <- function(n){
monthslist <- c('january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'septermber', 'october', 'november', 'december')
if(n <=12){
out <- monthslist[1:n]
} else{
print('invalid number')
}
return(out)
}
paste('emp', 1:10)
makeMonths <- function(n){
monthslist <- c('january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'septermber', 'october', 'november', 'december')
if(n <=12){
out <- monthslist[1:n]
} else{
print('invalid number')
}
return(out)
}
multiNumData <- function(rows, cols){
len <- rows * cols
out <- matrix(runif(len), rows, cols)
return(out)
}
salaries <- round(multiNumData(12, 3)*100, 2)
slaries
head(salaries)
colnames(salaries) <- paste('emp', 1:3)
rownames(salaries) <- makeMonths(12)
head(salaries)
paste('emp.', 1:3, sep = '')
colnames(salaries) <- paste('emp.', 1:3, sep = '')
rownames(salaries) <- makeMonths(12)
head(salaries)
multiVarFactData <- function(len, ...){
cats <- list(...)
out <- list()
for (i in 1:length(cats)){
out[[i]] <- factData(len, cats[[i]])
}
return(out)
}
gender <- factData(30, c('male', 'female'))
education <- factData(30, c('male', 'female'))
salary <- vecData(30)
age <- vecData(30)
hetdataset <- data.frame(gender, education, salary, age)
factData <- function(len, cat){
out <- sample(cat, len, replace = TRUE)
return(out)
}
gender <- factData(30, c('male', 'female'))
education <- factData(30, c('primary', 'secondary', 'higher'))
salary <- vecData(30)
age <- vecData(30)
hetdataset <- data.frame(gender, education, salary, age)
head(hetdataset)
gender <- factData(30, c('male', 'female'))
education <- factData(30, c('primary', 'secondary', 'higher'))
salary <- round(vecData(30), 2)
age <- round(vecData(30), 2)
hetdataset <- data.frame(gender, education, salary, age)
head(hetdataset)
sales
cor(sales)
salaries
cor(salaries)
sales <- multiNumData(12, 3)
colnames(sales) <- paste('Product.', LETTERS[1:3])
rownames(sales) <- makeMonths(12)
sales
sales <- round(sales*100, 2)
head(sales)
colnames(sales) <- paste('Product.', LETTERS[1:3], sep = '')
head(sales)
cor(sales, method = c('person'))
cor(sales, method = c('pearson'))
satisfaction <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
mulcordata <- data.frame(satisfaction, age, education, marital_status)
x <- mulcordata
ryx <- matrix(NA, 4, 1)
for (i in 1:length(names(x))){
ryx[i] <- cor(y, x[, i])
}
y <- satisfaction
x <- data.frame(age, education, marital_status)
ryx <- matrix(NA, 4, 1)
for (i in 1:length(names(x))){
ryx[i] <- cor(y, x[, i])
}
rxx <- cor(x)
r2 <- t(ryx) %*% solve(rxx) %*% ryx
r2
ryx
dim(x)
ryx <- matrix(NA, dim(x)[2], 1)
for (i in 1:length(names(x))){
ryx[i] <- cor(y, x[, i])
}
rxx <- cor(x)
## multiple correlation using matrix multiplication
r2 <- t(ryx) %*% solve(rxx) %*% ryx
r2
multicor.model <- lm(satisfaction ~ age + education+marital_status, data = mulcordata)
cor(multicor.model$model$satisfaction, multicor.model$fitted.values)
r <- cor(multicor.model$model$satisfaction, multicor.model$fitted.values)
r
r^2
library(polycor)
hetcor(x)
hetcor(mulcordata)
install.packages(mvtnorm)
install.packages('mvtnorm')
install.packages("mvtnorm")
# polcoric correlation
library(mvtnorm)
R <- matrix(0, 4, 4)
R
R[upper.tri(R)] <- runif(6)
R
diag(R) <- 1
R
R <- cov2cor(t(R) %*% R)
R
round(R, 4) # population correlations
data <- rmvnorm(1000, rep(0, 4), R)
head(data)
round(cor(data), 4)
dim(data)
x1 <- data[,1]
x2 <- data[,2]
y1 <- cut(data[,3], c(-Inf, .75, Inf))
y2 <- cut(data[,4], c(-Inf, -1, .5, 1.5, Inf))
x1
head(y1)
head(y2)
data <- data.frame(x1, x2, y1, y2)
head(data)
hetcor(data) # Pearson, polychoric, and polyserial correlations, 2-step est.
library(polycor)
hetcor(data) # Pearson, polychoric, and polyserial correlations, 2-step est.
library(polycor)
hetcor(data) # Pearson, polychoric, and polyserial correlations, 2-step est.
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
mulcordata <- data.frame(sat1, sat2, age, education, marital_status)
hetcor(mulcordata, ML=TRUE)
age_cat <- cut(age, c(0, 20, 40, 60, 80, 100))
mulcordata <- data.frame(sat1, sat2, age_cat, education, marital_status)
hetcor(mulcordata, ML=TRUE)
head(age_cat)
is.na(age_cat)
hetcor(mulcordata)
age_cat
age
age_cat <- cut(age, c(20, 40, 60, 80, 100))
mulcordata <- data.frame(sat1, sat2, age_cat, education, marital_status)
hetcor(mulcordata)
hetcor(mulcordata, ML=TRUE)
library(polycor)
# simulation
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
age_cat <- cut(age, c(20, 40, 60, 80, 100))
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
# polychoric correlation
mulcordata <- data.frame(sat1, sat2, age_cat, education, marital_status)
hetcor(mulcordata, ML=TRUE)
# polychoric correlation
mulcordata <- data.frame(sat1, sat2=sat1, age_cat, education, marital_status=education)
hetcor(mulcordata, ML=TRUE)
library(mvtnorm)
R <- matrix(0, 4, 4)
R[upper.tri(R)] <- runif(6)
diag(R) <- 1
R <- cov2cor(t(R) %*% R)
round(R, 4) # population correlations
data <- rmvnorm(1000, rep(0, 4), R)
round(cor(data), 4)
x1 <- data[,1]
x2 <- data[,2]
y1 <- cut(data[,3], c(-Inf, .75, Inf))
y2 <- cut(data[,4], c(-Inf, -1, .5, 1.5, Inf))
data <- data.frame(x1, x2, y1, y2)
hetcor(data) # Pearson, polychoric, and polyserial correlations, 2-step est.
R
cor(mulcordata)
# polychoric correlation
mulcordata <- data.frame(sat1, sat2, age_cat, education, marital_status)
cor(mulcordata)
# polychoric correlation
multicordata <- data.frame(sat1, sat2, age_cat, education, marital_status)
cor(multicordata)
# polychoric correlation
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
cor(multicordata)
hetcor(mulcordata, ML=TRUE)
# simulation
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
# age_cat <- cut(age, c(20, 40, 60, 80, 100))
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
head(multicordata)
cor(multicordata)
round(cor(multicordata), 2)
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
# age_cat <- cut(age, c(20, 40, 60, 80, 100))
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
round(cor(multicordata), 2)
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
# age_cat <- cut(age, c(20, 40, 60, 80, 100))
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
head(multicordata)
round(cor(multicordata), 2)
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
# age_cat <- cut(age, c(20, 40, 60, 80, 100))
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
head(multicordata)
round(cor(multicordata), 2)
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
# age_cat <- cut(age, c(20, 40, 60, 80, 100))
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
head(multicordata)
round(cor(multicordata), 2)
sat1 <- sample(c(0, 1), 30, replace = TRUE)
sat2 <- sample(c(0, 1), 30, replace = TRUE)
age <- round(vecData(30), )
# age_cat <- cut(age, c(20, 40, 60, 80, 100))
education <- sample(c(0, 1), 30, replace = TRUE)
marital_status <- sample(c(0, 1), 30, replace = TRUE)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
head(multicordata)
round(cor(multicordata), 2)
hetcor(mulcordata, ML=TRUE)
0.1909 + 0.1757
multicordata <- data.frame(sat1, sat2, age_cat, education, marital_status)
round(cor(multicordata), 2)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
hetcor(mulcordata, ML=TRUE)
multicordata <- data.frame(sat1, sat2, age, education, marital_status)
hetcor(multicordata, ML=TRUE)
hetcor(multicordata)
# polyserial
age_cat <- cut(age, c(20, 40, 60, 80, 100))
multicordata <- data.frame(sat1, sat2, age_cat, education, marital_status)
hetcor(multicordata, ML=TRUE)
citation("psych")
pnorm(6.2)
dnorm(6.2)
qnorm(6.2)
rnorm(6.2)
pnorm(1)
pnorm(0.99)
pnorm(0.5)
qnorm(0.5)
qnorm(0.75)
qnorm(0.90)
qnorm(0.99)
pnorm(0.99)
qnorm(p = 0.5)
qnorm(p = 0.90)
qnorm(p = 0.95)
qnorm(p = 0.99)
qnorm(p = 0.975)
dnorm(6.2)
dnorm(0)
dnorm(0.5)
dnorm(1)
dnorm(100)
dnorm(200)
dnorm(50)
dnorm(10)
dnorm(5)
dnorm()
sanitation <- sample(1:5, 30, replace = TRUE)
social.distance <- sample(1:5, 30, replace = TRUE)
covid19.infection <- sample(c('yes', 'no'), 30, replace = 30)
covid19.dataset <- data.frame(sanitation, social.distance, covid19.infection)
cor(covid19.dataset)
covid19.dataset <- data.frame(sanitation, social.distance, as.numeric(covid19.infection))
covid19.infection
as.numeric(covid19.infection)
is.factor(covid19.infection)
as.factor(covid19.dataset)
as.factor(covid19.infection)
covid19.infection.factor <- as.factor(covid19.infection)
levels <- levels(covid19.infection.factor)
levels
levels[1]
codeData <- function(dat){
if(is.factor(dat)){
levels <- levels(dat)
for(i in 1:length(levels)){
out <- ifelse(dat[levels[i]] == levels[i], i, NA)
}
return(out)
}
}
codeData(covid19.infection.factor)
1:length(levels)
dat[levels[i] == levels[i]]
codeData <- function(dat){
if(is.factor(dat)){
levels <- levels(dat)
for(i in 1:length(levels)){
out <- ifelse(dat[levels[i] == levels[i]], i, NA)
}
return(out)
}
}
codeData(covid19.infection.factor)
is.factor(covid19.infection.factor)
codeData <- function(dat){
if(is.factor(dat)){
levels <- levels(dat)
for(i in 1:length(levels)){
out <- ifelse(dat[levels[i]] == levels[i], i, NA)
}
return(out)
}
}
is.factor(covid19.infection.factor)
covid19.infection.factor['yes']
covid19.infection.factor
covid19.infection.factor == 'yes'
education
education == 'primary'
for (i in 1:length(levels(education))){}
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- ifelse(education == levels[i], i, NA)
}
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- ifelse(education == levels[i], i, NA)
print(out)
}
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- ifelse(education == levels[i], i, )
print(out)
}
for (i in 1:length(covid19.infection.factor)){
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- ifelse(education == levels[i], i, NA)
}
print(out)
}
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- ifelse(education == levels[i], i, NA)
}
print(out)
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- ifelse(education == levels[i], i, NA)
print(out)
}
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- education[levels[i]] == i
print(out)
}
for (i in 1:length(levels(as.factor(education)))){
levels <- levels(as.factor(education))
out <- education == levels[i]
print(out)
}
unclass(education)
unclass(as.factor(education))
codeData <- function(dat){
out <- unclass(as.factor(dat))
return(out)
}
codeData(education)
codeData(sanitation)
codeData(covid19.infection)
codeData <- function(dat){
out <- unclass(as.factor(dat))
return(out)
}
covid19.dataset <- data.frame(sanitation, social.distance, codeData(covid19.infection))
cor(covid19.dataset)
covid19.dataset <- data.frame(sanitation, social.distance, as.numeric(codeData(covid19.infection)))
cor(covid19.dataset)
covid19.dataset <- data.frame(sanitation, social.distance, covid19 = as.numeric(codeData(covid19.infection)))
cor(covid19.dataset)
library(ppcor)
ppcor(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
pcor(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
pcor(covid19.dataset$sanitation, covid19.dataset$covid19)
prcor(covid19.dataset)
pcor(covid19.dataset)
pcor.test(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
codeData <- function(dat){
out <- unclass(as.factor(dat))
return(out)
}
sanitation <- sample(1:5, 30, replace = TRUE)
social.distance <- sample(1:5, 30, replace = TRUE)
covid19.infection <- sample(c('yes', 'no'), 30, replace = 30)
covid19.dataset <- data.frame(sanitation, social.distance, covid19 = as.numeric(codeData(covid19.infection)))
cor(covid19.dataset)
library(ppcor)
pcor(covid19.dataset)
pcor.test(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
sanitation <- sample(1:5, 30, replace = TRUE)
social.distance <- sample(1:5, 30, replace = TRUE)
covid19.infection <- sample(c('yes', 'no'), 30, replace = 30)
covid19.dataset <- data.frame(sanitation, social.distance, covid19 = as.numeric(codeData(covid19.infection)))
cor(covid19.dataset)
library(ppcor)
pcor(covid19.dataset)
pcor.test(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
sanitation <- sample(1:5, 30, replace = TRUE)
social.distance <- sample(1:5, 30, replace = TRUE)
covid19.infection <- sample(c('yes', 'no'), 30, replace = 30)
covid19.dataset <- data.frame(sanitation, social.distance, covid19 = as.numeric(codeData(covid19.infection)))
cor(covid19.dataset)
library(ppcor)
pcor(covid19.dataset)
pcor.test(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
sanitation <- sample(1:5, 30, replace = TRUE)
social.distance <- sample(1:5, 30, replace = TRUE)
covid19.infection <- sample(c('yes', 'no'), 30, replace = 30)
covid19.dataset <- data.frame(sanitation, social.distance, covid19 = as.numeric(codeData(covid19.infection)))
cor(covid19.dataset)
library(ppcor)
pcor(covid19.dataset)
pcor.test(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
sanitation <- sample(1:5, 30, replace = TRUE)
social.distance <- sample(1:5, 30, replace = TRUE)
covid19.infection <- sample(c('yes', 'no'), 30, replace = 30)
covid19.dataset <- data.frame(sanitation, social.distance, covid19 = as.numeric(codeData(covid19.infection)))
cor(covid19.dataset)
library(ppcor)
pcor(covid19.dataset)
pcor.test(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
pcor.test(covid19.dataset$social.distance, covid19.dataset$covid19, covid19.dataset$social.distance)
pcor.test(covid19.dataset$social.distance, covid19.dataset$covid19, covid19.dataset$sanitation)
spcor.test(covid19.dataset$social.distance, covid19.dataset$covid19, covid19.dataset$sanitation)
spcor.test(covid19.dataset$sanitation, covid19.dataset$covid19, covid19.dataset$social.distance)
